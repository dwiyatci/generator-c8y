describe('<%= moduleName %>: <%= widgetDataServiceName %>', () => {
  'use strict';

  let $injector;
  let $rootScope;
  let $q;
  let dataService;

  beforeEach(() => {
    common.globalBeforeWithUI();
    module('<%= moduleName %>');

    inject((_$injector_) => {
      $injector = _$injector_;
      $rootScope = $injector.get('$rootScope');
      $q = $injector.get('$q');
      dataService = $injector.get('<%= widgetDataServiceName %>');
    });
  });

  describe('getting widget data', () => {
    let listMeasurementsStub;

    beforeEach(() => {
      //////////// stubbing dependencies

      // listMeasurementsStub = spyOn($injector.get('c8yMeasurements'), 'list');
    });

    it('should return correct data', (done) => {
      // given
      const filter = {};

      const measurements = [];

      const expectedData = [];

      // when
      // listMeasurementsStub
      //  .and.callFake(() => $q.resolve(measurements));

      dataService.getDataFor(filter)
        .then((data) => {
          // then
          expect(data)
            .toEqual(expectedData);

          done();
        });

      $rootScope.$apply();
    });
  });
});
