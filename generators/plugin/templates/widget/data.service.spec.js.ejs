describe('<%= moduleName %>: <%= widgetDataServiceName %>', () => {
  'use strict';

  let $injector;
  let $httpBackend;
  let dataService;

  beforeEach(() => {
    common.globalBeforeWithUI();
    module('<%= moduleName %>');

    inject(
      (
        _$injector_,
        _$httpBackend_
      ) => {
        $injector = _$injector_;
        $httpBackend = _$httpBackend_;
        dataService = $injector.get('<%= widgetDataServiceName %>');
      }
    );
  });

  describe('getting widget data', () => {
    const fakeDataPath = ':::PLUGIN_PATH:::/fake-data.json';
    let fakeDataService;
    let dataPromiseStub;

    beforeEach(() => {
      fakeDataService = $injector.get('<%= widgetFakeDataServiceName %>');

      $httpBackend
        .when('GET', fakeDataPath)
        .respond(readJSON(`plugins/${fakeDataPath}`));

      //////////// stubbing dependencies

      // dataPromiseStub = spyOn($injector.get('c8yMeasurements'), 'list');
    });

    it('should return correct data', () => {
      // given
      const deviceId = 42;

      // when
      // dataPromiseStub
      //  .and.returnValue(fakeDataService.getDataForDeviceId(deviceId));

      dataService.getDataForDeviceId(deviceId)
        .then((data) => {
          const expectedData = [];

          // then
          expect(data)
            .toEqual(expectedData);
        });

      $httpBackend.flush();
    });
  });
});
