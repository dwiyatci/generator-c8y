describe('<%= moduleName %>: <%= widgetDataServiceName %>', () => {
  'use strict';

  const { module } = angular.mock;

  let $injector: ng.auto.IInjectorService;
  let $rootScope: ng.IRootScopeService;
  let $q: ng.IQService;
  let $window: ng.IWindowService;
  // let c8yStubsHelper: any;
  let dataService: any;

  beforeEach(() => {
    (<%- '<any>' %>window).common.globalBeforeWithUI();
    // module('c8y.pocs.coreServiceStubsHelper');
    module('<%= moduleName %>');

    inject((_$injector_: ng.auto.IInjectorService) => {
      $injector = _$injector_;
      $rootScope = $injector.get('$rootScope');
      $q = $injector.get('$q');
      $window = $injector.get('$window');
      // c8yStubsHelper = $injector.get('c8yStubsHelper');
      dataService = $injector.get('<%= widgetDataServiceName %>');
      $window.Promise = $q;
    });
  });

  describe('getting widget data', () => {
    // let c8yMeasurements: any;

    beforeEach(() => {
      // dependencies to be stubbed
      // c8yMeasurements = $injector.get('c8yMeasurements');
    });

    it('should return correct data', (done) => {
      // given
      const filter: c8y.WidgetDataFilter = {};

      // const measurements = [];

      const expectedData: any = [];

      // when
      // c8yMeasurements.list = c8yStubsHelper.createListMeasurementsFake(measurements);

      dataService.getDataFor(filter)
        .then((data: any) => {
          // then
          expect(data)
            .toEqual(expectedData);

          done();
        });

      $rootScope.$apply();
    });
  });
});
