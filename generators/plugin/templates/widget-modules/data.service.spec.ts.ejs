describe('<%= moduleName %>: <%= widgetDataServiceName %>', () => {
  'use strict';

  describe('getting widget data', () => {
    it('should return correct data', (done) => {
      const { $injector, $rootScope, c8yStubsHelper, dataService } = setup();
      // const c8yMeasurements = $injector.get('c8yMeasurements');

      // given
      const filter: c8y.WidgetDataFilter = {};

      // const measurements = [];

      const expectedData = [];

      // when
      // c8yMeasurements.list = c8yStubsHelper.createListMeasurementsFake(measurements);

      dataService.getDataFor(filter)
        .then((data) => {
          // then
          expect(data)
            .toEqual(expectedData);

          done();
        });

      $rootScope.$apply();
    });
  });

  function setup() {
    const win: any = window;
    const setupVariables = {};

    common.globalBeforeWithUI();
    // angular.mock.module('c8y.pocs.coreServiceStubsHelper');
    angular.mock.module('<%= moduleName %>');
    // angular.mock.module(($provide) => {
    //   setupVariables.c8yModalSpy = jasmine.createSpy('c8yModal');
    //   $provide.value('c8yModal', c8yModalSpy);
    // });

    inject(($injector: angular.auto.IInjectorService) => _.assign(setupVariables, {
      $injector,
      $rootScope: $injector.get('$rootScope'),
      $q: $injector.get('$q'),
      // c8yStubsHelper: $injector.get('c8yStubsHelper'),
      dataService: $injector.get('<%= widgetDataServiceName %>')
    }));

    // win.Promise = setupVariables.$q;

    return setupVariables;
  }
});
