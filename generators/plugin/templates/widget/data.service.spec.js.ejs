describe('<%= moduleName %>: <%= widgetDataServiceName %>', () => {
  'use strict';

  let $injector;
  let $rootScope;
  let $q;
  // let cy8StubsHelper;
  let dataService;

  beforeEach(() => {
    common.globalBeforeWithUI();
    // module('c8y.pocs.coreServiceStubsHelper');
    module('<%= moduleName %>');

    inject((_$injector_) => {
      $injector = _$injector_;
      $rootScope = $injector.get('$rootScope');
      $q = $injector.get('$q');
      // c8yStubsHelper = $injector.get('c8yStubsHelper');
      dataService = $injector.get('<%= widgetDataServiceName %>');
      window.Promise = $q; // "naughty" trick to make async-await work in unit tests
    });
  });

  describe('getting widget data', () => {
    // let c8yMeasurements;

    beforeEach(() => {
      // dependencies to be stubbed
      // c8yMeasurements = $injector.get('c8yMeasurements');
    });

    it('should return correct data', (done) => {
      // given
      const filter = {};

      // const measurements = [];

      const expected = [];

      // when
      // c8yMeasurements.list = c8yStubsHelper.createListMeasurementsFake(measurements);

      dataService.getDataFor(filter)
        .then((actual) => {
          // then
          expect(actual)
            .toEqual(expected);

          done();
        });

      $rootScope.$apply();
    });
  });
});
